################################################################################
#
#    Copyright 2018 NEOautus Ltd. (http://neoautus.com)
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may not
#    use this file except in compliance with the License. You may obtain a copy
#    of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#
################################################################################

# This file describes the layouts which LucidJ Kernel will try, and in which
# order. These possible layouts are described in a file so we don't need to
# recompile anything to change the discovery heuristics. We also alleviate the
# need for complex shell scripting by putting more effort on Java side.
#
# The layouts are listed in search order in the property 'layouts'. The search
# is performed by resolving any references ${...} and checking whether the
# directories exist or not. If they _all_ exist we have a match and the resolved
# properties are incorporated into system.
#
# The special property 'basedir' is the absolute directory where the class
# 'org.lucidj.kernel.Main' (or the jar it belongs) is stored. For instance,
# if the kernel was invoked like 'java -jar /opt/lucidj/kernel.jar' then basedir
# will be '/opt/lucidj'.
#
# All directories are resolved to full paths _before_ being tried and are
# returned as such. The layout name is removed from the property, i.e.
# 'home-bin.system.home' becomes just 'system.home'.
#
# Java properties, like 'user.home' may be used.
#
# IF THERE'S A 'layout.properties' FILE ALONGSIDE THE KERNEL JAR, IT HAVE
# PRECEDENCE OVER THE 'layout.properties' STORE INSIDE THE JAR, AND WILL BE USED
# INSTEAD. IN THIS CASE, THE EMBEDDED 'layout.properties' IS IGNORED.
#
# OPTIONAL DIRECTORES ARE _NOT_ HANDLED HERE. ALL DIRECTORIES MUST EXIST.

# The layouts we'll try
layouts=home-bin, home-jar, jar-conf, jar-alone

# Extra properties set on successful match
export.felix.config.properties=file:${system.conf}/config.properties
export.felix.cache.rootdir=${system.data}

# [system-home]
#       |
#       +---bin/ -> kernel.jar
#       |
#       +---conf/ -> {configuration files}
#       |
#       +---log/ -> {log files}
#       |
#       +---data/ -> {felix-cache} etc
#
home-bin.system.home=${basedir}/..
home-bin.system.bin=${home-bin.system.home}/bin
home-bin.system.conf=${home-bin.system.home}/conf
home-bin.system.log=${home-bin.system.home}/log
home-bin.system.data=${home-bin.system.home}/data

# [system-home]/ -> kernel.jar
#       |
#       +---conf/ -> {configuration files}
#       |
#       +---log/ -> {log files}
#       |
#       +---data/ -> {felix-cache} etc
#
home-jar.system.home=${basedir}
home-jar.system.bin=${basedir}
home-jar.system.conf=${basedir}/conf
home-jar.system.log=${basedir}/log
home-jar.system.data=${basedir}/data

# [system-home]/ -> kernel.jar, {log files}, {felix-cache}
#       |
#       +---conf/ -> {configuration files}
#
jar-conf.system.home=${basedir}
jar-conf.system.bin=${basedir}
jar-conf.system.conf=${basedir}/conf
jar-conf.system.log=${basedir}
jar-conf.system.data=${basedir}

# *** Fallback for Jar alone ***
#
# [system-home]/ -> kernel.jar, {configuration files}, {log files}, {felix-cache}
#
jar-alone.system.home=${basedir}
jar-alone.system.bin=${basedir}
jar-alone.system.conf=${basedir}
jar-alone.system.log=${basedir}
jar-alone.system.data=${basedir}

#EOF
